name: General build matrix

on:
  push:
    branches: [main]
    paths-ignore: [docs/**, scripts/**, "**.md", "**.mdx"]
  pull_request:
    branches: [main]
    paths-ignore: [docs/**, scripts/**, "**.md", "**.mdx"]
    types: [opened, reopened, synchronize, ready_for_review]
  workflow_dispatch:

# Cancel all previous instances in favor of latest revision of a PR.
# Allow running main builds to complete to help with ccache refreshes.
concurrency:
  group: general-build-${{ github.event.pull_request.number || github.ref_name }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  skip-duplicates:
    continue-on-error: true
    runs-on: ubuntu-latest
    outputs:
      should_skip_code: ${{ steps.skip_code_check.outputs.should_skip }}
      should_skip_data: ${{ steps.skip_data_check.outputs.should_skip }}
    steps:
      - id: skip_code_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          paths_ignore: '["android/**", "docs/**", "doxygen_doc/**", "msvc-**", "tools/**", "utilities/**", "scripts/**", "data/**", "lang/**"]'
      - id: skip_data_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          paths_ignore: '["android/**", "docs/**", "doxygen_doc/**", "msvc-**", "tools/**", "utilities/**", "scripts/**"]'

  varied_builds:
    needs: skip-duplicates
    strategy:
      fail-fast: ${{ github.ref_name == 'main' }}
      max-parallel: ${{ github.ref_name == 'main' && 20 || 1 }}
      matrix:
        include:
          - title: GCC, Ubuntu, Curses
            compiler: g++
            os: ubuntu-latest
            tiles: 0
            sound: 0
            test-stage: 1
            libbacktrace: 1
            native: linux64
            ccache_limit: 2G
            ccache_key: linux-gcc
            always-run: true

          - title: GCC, Ubuntu, Tiles, Sound, CMake, Languages
            compiler: g++
            os: ubuntu-latest
            tiles: 1
            sound: 1
            languages: all
            native: linux64
            ccache_limit: 2G
            ccache_key: linux-gcc-cmake-tiles
            upload-artifact: true

    name: ${{ matrix.title }}
    runs-on: ${{ matrix.os }}
    env:
      ZSTD_CLEVEL: 17
      CMAKE: 1
      COMPILER: ${{ matrix.compiler }}
      OS: ${{ matrix.os }}
      TILES: ${{ matrix.tiles }}
      SOUND: ${{ matrix.sound }}
      TEST_STAGE: ${{ matrix.test-stage }}
      LANGUAGES: ${{ matrix.languages }}
      LIBBACKTRACE: ${{ matrix.libbacktrace }}
      NATIVE: ${{ matrix.native }}
      RELEASE: 1

      CCACHE_LIMIT: ${{ matrix.ccache_limit }}
      CCACHE_FILECLONE: true
      CCACHE_HARDLINK: true
      CCACHE_NOCOMPRESS: true

      SKIP: ${{ matrix.always-run != true && ( github.event.pull_request.draft == true || needs.skip-duplicates.outputs.should_skip_code == true || needs.skip-duplicates.outputs.should_skip_data == true ) }}

    steps:
      - name: checkout repository
        if: ${{ env.SKIP == 'false' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: install dependencies (ubuntu)
        if: ${{ env.SKIP == 'false' }}
        run: |
          sudo apt-get update
          sudo apt-get install gcc-14 libncursesw5-dev ccache gettext parallel libsqlite3-dev zlib1g-dev
          sudo locale-gen en_US.UTF-8 fr_FR.UTF-8 ru_RU.UTF-8

          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-14 100
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 100
          g++ --version

      - name: install SDL2 dependencies (ubuntu)
        if: ${{ env.SKIP == 'false' && matrix.tiles == 1 }}
        run: |
          sudo apt-get install libsdl2-dev libsdl2-ttf-dev libsdl2-image-dev libsdl2-mixer-dev libpulse-dev libflac-dev

      # problem matchers are only ran on GCC to reduce error spam
      - name: add problem matcher
        if: ${{ matrix.always-run == true }}
        run: |
          # Enable GitHub actions problem matchers
          # (See https://github.com/actions/toolkit/blob/master/docs/problem-matchers.md)
          echo "::add-matcher::build-scripts/problem-matchers/catch2.json"
          echo "::add-matcher::build-scripts/problem-matchers/debugmsg.json"

      - name: prepare
        if: ${{ env.SKIP == 'false' }}
        run: bash ./build-scripts/requirements.sh

      - name: Get ccache vars
        id: get-ccache-vars
        if: ${{ env.SKIP == 'false' }}
        shell: bash
        run: |
          echo "datetime=$(/bin/date -u "+%Y%m%d%H%M")" >> $GITHUB_OUTPUT

      - name: ccache cache files
        if: ${{ env.SKIP == 'false' }}
        uses: actions/cache@v3
        id: cache
        with:
          path: "~/.cache/ccache"
          # double-dash after compiler is not a typo, it is to disambiguate between g++-<date> and g++-11-<date> for restore key prefix matching
          key: ccache-${{ github.ref_name }}-${{ matrix.ccache_key }}--${{ steps.get-ccache-vars.outputs.datetime }}
          restore-keys: ccache-main-${{ matrix.ccache_key }}--

      - name: ccache info
        if: ${{ env.SKIP == 'false' && steps.cache.outputs.cache-hit != 'true' }}
        run: |
          echo CCache failed to restore from cache, emmiting stats
          ccache --show-stats --verbose

      - uses: ammaraskar/gcc-problem-matcher@master

      - name: build
        if: ${{ env.SKIP == 'false' }}
        run: bash ./build-scripts/gha_compile_only.sh

      - name: post-build ccache stats and cleanup
        if: ${{ env.SKIP == 'false' && !failure() }}
        run: |
          ccache --show-stats --verbose
          ccache --max-size ${{ env.CCACHE_LIMIT }}
          ccache --cleanup
          ccache --show-stats --verbose

      - name: clear ccache on PRs
        if: ${{ github.ref_name != 'main' && env.SKIP == 'false' && !failure() }}
        run: ccache --clear

      - name: run tests
        if: ${{ github.ref_name != 'main' && env.SKIP == 'false' }}
        run: bash ./build-scripts/gha_test_only.sh

      - name: emit success artifact
        if: ${{ success() && matrix.upload-artifact == 'true' }}
        uses: actions/upload-artifact@v4.6.0
        with:
          name: ${{ github.event.number }}
          path: ${{ github.event.number }}

      - name: upload artifacts if failed
        uses: actions/upload-artifact@v4.6.0
        if: failure()
        with:
          name: cata_test
          path: tests/cata_test
          if-no-files-found: ignore
