/**
 * Generates allowed semantic PR title schema for project.
 *
 * 1. collects list of all mod IDs
 * 2. generate list of allowed scopes using mod IDs
 * 3. write to `.github/semantic.yaml` file
 */
import type { Config } from "https://raw.githubusercontent.com/Ezard/semantic-prs/d6970fded0b5bcb1a2d55778e5be94a83453a897/functions/src/config.ts"
import mod from "https://raw.githubusercontent.com/commitizen/conventional-commit-types/c3a9be4c73e47f2e8197de775f41d981701407fb/index.json" with {
  type: "json",
}
import { walk } from "$std/fs/walk.ts"
import { asynciter } from "$asynciter/mod.ts"
import { SafeParseSuccess, z } from "$zod/mod.ts"
import * as YAML from "$std/yaml/stringify.ts"
import type {} from "$ts-reset/entrypoints/filter-boolean.d.ts"
import { outdent } from "$outdent/mod.ts"

type Modinfo = z.infer<typeof modinfoSchema>

/** Extracts ID from Modinfo entry. */
export const modinfoSchema = z
  .object({ type: z.literal("MOD_INFO"), id: z.string() })
  .transform((x) => x.id)

const parseModinfos = (xs: unknown[]) => xs.map((x) => modinfoSchema.safeParse(x))

/**
 * @param path Path to `modinfo.json` file.
 * @returns Mod ID or `undefined` if file is invalid.
 */
export const extractModinfo = (path: string): Promise<string | undefined> =>
  Deno
    .readTextFile(path)
    .then(JSON.parse)
    .then(parseModinfos)
    .then((xs) => xs.find((x): x is SafeParseSuccess<Modinfo> => x.success)?.data)

/** List of all mod IDs. */
export const allModIds = await asynciter(walk("data/mods", {
  maxDepth: 2,
  includeDirs: false,
  exts: [".json"],
  match: [/modinfo\.json/],
  skip: [/bn/],
}))
  .map(({ path }) => path)
  .concurrentUnorderedMap(extractModinfo)
  .collect()
  .then((xs) => xs.filter(Boolean))

/**
 * see `changelog_guidelines.md` for list of all allowed scopes.
 */
export const scopes = {
  /** Default allowed scopes */
  base: ["content", "UI", "i18n", "balance", "port"],
  /** List of `mods/<MOD_ID>` */
  mods: allModIds.toSorted().map((x) => `mods/${x}`),
}

// https://github.com/Ezard/semantic-prs?tab=readme-ov-file#configuration
const config = {
  enabled: true,
  titleOnly: true,
  targetUrl: "https://docs.cataclysmbn.org/en/contribute/changelog_guidelines/",

  types: Object.keys(mod.types),
  scopes: Object.values(scopes).flat(),
} satisfies Partial<Config>

if (import.meta.main) {
  const setting = YAML.stringify(config)
  const content = outdent`
      # This file is generated by \`scripts/semantic.ts\`, do not edit manually.
      #
      # For more on configuration:
      # https://github.com/Ezard/semantic-prs?tab=readme-ov-file#configuration-options
      #
      # Validate the PR title, and ignore all commit messages
      ${setting}
    `
  await Deno.writeTextFile(".github/semantic.yml", content)
}
