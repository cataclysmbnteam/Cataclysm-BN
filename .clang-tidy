# Enable some categories of checks and then disable individual ones.
# The disabled checks that appear as part of the initial alphabetical section
# enabling categories (e.g. cert-err58-cpp) are ones that do not make sense for
# this codebase and we do not intend to fix.  The disabled checks appearing
# thereafter in a separate alphabetical list have yet to be triaged.  We may
# fix their errors or recategorise them as checks we don't care about.

Checks: |
  cppcoreguidelines-slicing
  llvm-namespace-comment

  -clang-analyzer-core.CallAndMessage
  -clang-analyzer-deadcode.DeadStores

  cert-*
  -cert-dcl21-cpp
  -cert-env33-c
  -cert-err58-cpp
  -cert-err34-c
  -cert-flp30-c
  -cert-msc30-c
  -cert-msc32-c
  -cert-msc50-cpp
  -cert-msc51-cpp
  -cert-dcl37-c
  -cert-dcl51-cpp
  -cert-oop54-cpp
  -cert-str34-c

  misc-*
  -misc-confusable-identifiers
  -misc-misplaced-const
  -misc-no-recursion
  -misc-non-private-member-variables-in-classes
  -misc-redundant-expression
  -misc-use-anonymous-namespace
  -misc-const-correctness

  bugprone-*
  -bugprone-throw-keyword-missing
  -bugprone-branch-clone
  -bugprone-infinite-loop
  -bugprone-misplaced-widening-cast
  -bugprone-narrowing-conversions
  -bugprone-redundant-branch-condition
  -bugprone-reserved-identifier
  -bugprone-signed-char-misuse
  -bugprone-sizeof-expression
  -bugprone-unhandled-self-assignment

  modernize-*
  -modernize-use-auto
  -modernize-use-trailing-return-type
  -modernize-avoid-bind
  -modernize-avoid-c-arrays
  -modernize-pass-by-value
  -modernize-return-braced-init-list
  -modernize-use-default-member-init
  -modernize-use-emplace
  -modernize-use-transparent-functors
  -modernize-use-override
  -modernize-use-nodiscard
  -modernize-concat-nested-namespaces
  -modernize-loop-convert
  -modernize-unary-static-assert

  performance-*
  -performance-no-automatic-move
  -performance-trivially-destructible
  -performance-for-range-copy
  -performance-inefficient-vector-operation
  -performance-noexcept-move-constructor
  -performance-implicit-conversion-in-loop
  -performance-inefficient-algorithm
  -performance-inefficient-string-concatenation
  -performance-type-promotion-in-math-fn
  -performance-unnecessary-value-param

  readability-*
  -readability-avoid-const-params-in-decls
  -readability-convert-member-functions-to-static
  -readability-braces-around-statements
  -readability-else-after-return
  -readability-function-cognitive-complexity
  -readability-function-size
  -readability-implicit-bool-conversion
  -readability-isolate-declaration
  -readability-identifier-naming
  -readability-magic-numbers
  -readability-make-member-function-const
  -readability-named-parameter
  -readability-redundant-control-flow
  -readability-redundant-declaration
  -readability-identifier-length
  -readability-qualified-auto
  -readability-redundant-access-specifiers
  -readability-use-anyofallof

  cata-*
  -cata-combine-locals-into-point

WarningsAsErrors: '*'
HeaderFilterRegex: "(src|(test(?!.*catch.*catch.h))|tools).*"
FormatStyle: none

CheckOptions:
  - key: cata-large-inline-function.MaxStatements
    value: 5
  - key: cata-text-style.EscapeUnicode
    value: 0
  - key: cert-oop54-cpp.WarnOnlyIfThisHasSuspiciousField
    value: true
  - key: readability-uppercase-literal-suffix.NewSuffixes
    value: "L;UL;LL;ULL"
# vim:tw=0
